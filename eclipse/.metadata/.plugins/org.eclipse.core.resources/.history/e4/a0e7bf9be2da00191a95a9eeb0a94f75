package net.mcreator.thaumic_armors.init;
import static com.shinoow.abyssalcraft.lib.ACConfig.*;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.*;

import net.mcreator.thaumic_armors.thaumic_armors;
import net.mcreator.thaumic_armors.api.APIUtils;
import net.mcreator.thaumic_armors.api.ThaumicArmorsApi;
import net.mcreator.thaumic_armors.init.TAItems;
import net.mcreator.thaumic_armors.CommonProxythaumic_armors;
import net.mcreator.thaumic_armors.init.*;
import net.mcreator.thaumic_armors.Tabs.TATabs;


import net.minecraft.block.Block;
import net.minecraft.enchantment.Enchantment;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityList;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.potion.Potion;
import net.minecraft.potion.PotionType;
import net.minecraft.util.ResourceLocation;
import net.minecraft.util.SoundEvent;
import net.minecraft.util.Tuple;
import net.minecraft.util.math.MathHelper;
import net.minecraft.world.DimensionType;
import net.minecraft.world.biome.Biome;
import net.minecraftforge.common.*;
import net.minecraftforge.common.BiomeDictionary.Type;
import net.minecraftforge.common.BiomeManager.BiomeEntry;
import net.minecraftforge.common.BiomeManager.BiomeType;
import net.minecraftforge.common.config.Configuration;
import net.minecraftforge.event.RegistryEvent;
import net.minecraftforge.fluids.*;
import net.minecraftforge.fml.client.event.ConfigChangedEvent;
import net.minecraftforge.fml.common.FMLCommonHandler;
import net.minecraftforge.fml.common.event.*;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.common.network.NetworkRegistry;
import net.minecraftforge.oredict.OreDictionary;

public class InitHandler implements ILifeCycleHandler {

	public static final InitHandler INSTANCE = new InitHandler();

	public static Configuration cfg;

	final List<Block> BLOCKS = new ArrayList<>();
	final List<Item> ITEMS = new ArrayList<>();
	final List<Biome> BIOMES = new ArrayList<>();
	final List<Enchantment> ENCHANTMENTS = new ArrayList<>();
	final List<Potion> POTIONS = new ArrayList<>();
	final List<PotionType> POTION_TYPES = new ArrayList<>();
	final List<SoundEvent> SOUND_EVENTS = new ArrayList<>();

	@Override
	public void preInit(FMLPreInitializationEvent event) {
		AbyssalCraft.metadata = event.getModMetadata();
		AbyssalCraft.metadata.description += "\n\n\u00a76Supporters: "+getSupporterList()+"\u00a7r";

		MinecraftForge.EVENT_BUS.register(new AbyssalCraftEventHooks());
		MinecraftForge.TERRAIN_GEN_BUS.register(new AbyssalCraftEventHooks());
		MinecraftForge.EVENT_BUS.register(this);
		MinecraftForge.EVENT_BUS.register(new KnowledgeEventHandler());
		MinecraftForge.EVENT_BUS.register(new PlagueEventHandler());
		MinecraftForge.EVENT_BUS.register(new PurgeEventHandler());
		NetworkRegistry.INSTANCE.registerGuiHandler(AbyssalCraft.instance, new CommonProxy());
		AbyssalCraftAPI.setInternalNDHandler(new InternalNecroDataHandler());
		AbyssalCraftAPI.setInternalMethodHandler(new InternalMethodHandler());
		ACLoot.init();
		ACTabs.init();

		cfg = new Configuration(event.getSuggestedConfigurationFile());
		syncConfig();

		if(hardcoreMode){
			AbyssalCraftAPI.coralium.setDamageIsAbsolute();
			AbyssalCraftAPI.dread.setDamageIsAbsolute();
		}

		if(!FluidRegistry.isFluidRegistered("liquidcoralium")){
			AbyssalCraftAPI.liquid_coralium_fluid = LIQUID_CORALIUM;
			FluidRegistry.registerFluid(AbyssalCraftAPI.liquid_coralium_fluid);
			FluidRegistry.addBucketForFluid(AbyssalCraftAPI.liquid_coralium_fluid);
		} else {
			ACLogger.warning("Liquid Coralium was already registered by another mod, adding ours as alternative.");
			AbyssalCraftAPI.liquid_coralium_fluid = FluidRegistry.getFluid("liquidcoralium");
			FluidRegistry.registerFluid(LIQUID_CORALIUM);
			FluidRegistry.addBucketForFluid(LIQUID_CORALIUM);
		}

		if(!FluidRegistry.isFluidRegistered("liquidantimatter")){
			AbyssalCraftAPI.liquid_antimatter_fluid = LIQUID_ANTIMATTER;
			FluidRegistry.registerFluid(AbyssalCraftAPI.liquid_antimatter_fluid);
			FluidRegistry.addBucketForFluid(AbyssalCraftAPI.liquid_antimatter_fluid);
		} else {
			ACLogger.warning("Liquid Antimatter was already registered by another mod, adding ours as alternative.");
			AbyssalCraftAPI.liquid_antimatter_fluid = FluidRegistry.getFluid("liquidantimatter");
			FluidRegistry.registerFluid(LIQUID_ANTIMATTER);
			FluidRegistry.addBucketForFluid(LIQUID_ANTIMATTER);
		}
	}

	@Override
	public void init(FMLInitializationEvent event) {}

	@Override
	public void postInit(FMLPostInitializationEvent event) {
		constructBlacklists();
		DimensionType[] dims = DimensionManager.getRegisteredDimensions().keySet().toArray(new DimensionType[0]);
		blackHoleDimlist = new int[dims.length];
		for(int i = 0; i < dims.length; i++)
			blackHoleDimlist[i] = dims[i].getId();
	}

	@Override
	public void loadComplete(FMLLoadCompleteEvent event) {}

	public void serverStart(FMLServerAboutToStartEvent event){
		String clname = ThaumicArmorsApi.getInternalNDHandler().getClass().getName();
		String expect = "com.shinoow.abyssalcraft.common.handlers.InternalNecroDataHandler";
		if(!clname.equals(expect)) {
			new IllegalAccessError("The AbyssalCraft API internal NecroData handler has been overriden. "
					+ "Since things are not going to work correctly, the game will now shut down."
					+ " (Expected classname: " + expect + ", Actual classname: " + clname + ")").printStackTrace();
			FMLCommonHandler.instance().exitJava(1, true);
		}
		clname = AbyssalCraftAPI.getInternalMethodHandler().getClass().getName();
		expect = "com.shinoow.abyssalcraft.common.handlers.InternalMethodHandler";
		if(!clname.equals(expect)) {
			new IllegalAccessError("The AbyssalCraft API internal Method handler has been overriden. "
					+ "Since things are not going to work correctly, the game will now shut down."
					+ " (Expected classname: " + expect + ", Actual classname: " + clname + ")").printStackTrace();
			FMLCommonHandler.instance().exitJava(1, true);
		}
	}

	@SubscribeEvent
	public void onConfigChanged(ConfigChangedEvent.OnConfigChangedEvent eventArgs) {
		if(eventArgs.getModID().equals("abyssalcraft"))
			syncConfig();
	}

	@SubscribeEvent
	public void registerBlocks(RegistryEvent.Register<Block> event){
		event.getRegistry().registerAll(BLOCKS.toArray(new Block[0]));
		RitualUtil.addBlocks();
	}

	@SubscribeEvent
	public void registerItems(RegistryEvent.Register<Item> event){
		event.getRegistry().registerAll(ITEMS.toArray(new Item[0]));
		ACItems.liquid_coralium_bucket_stack = FluidUtil.getFilledBucket(new FluidStack(AbyssalCraftAPI.liquid_coralium_fluid, Fluid.BUCKET_VOLUME));
		ACItems.liquid_antimatter_bucket_stack = FluidUtil.getFilledBucket(new FluidStack(AbyssalCraftAPI.liquid_antimatter_fluid, Fluid.BUCKET_VOLUME));

		ThaumicArmorsApi.setRepairItems();
	}


	@SubscribeEvent
	public void registerEnchantments(RegistryEvent.Register<Enchantment> event){
		event.getRegistry().registerAll(ENCHANTMENTS.toArray(new Enchantment[0]));
	}

	@SubscribeEvent
	public void registerPotions(RegistryEvent.Register<Potion> event){
		event.getRegistry().registerAll(POTIONS.toArray(new Potion[0]));
	}

	@SubscribeEvent
	public void registerPotionTypes(RegistryEvent.Register<PotionType> event){
		event.getRegistry().registerAll(POTION_TYPES.toArray(new PotionType[0]));
	}

	@SubscribeEvent
	public void registerSoundEvents(RegistryEvent.Register<SoundEvent> event){
		event.getRegistry().registerAll(SOUND_EVENTS.toArray(new SoundEvent[0]));
	}
}
